# coding: utf-8

"""
    standard public schema

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 12.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Extendednotesresearch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'research_id': 'int',
        'script_id': 'int',
        'notes': 'str',
        'research_details': 'str'
    }

    attribute_map = {
        'research_id': 'research_id',
        'script_id': 'script_id',
        'notes': 'notes',
        'research_details': 'research_details'
    }

    def __init__(self, research_id=None, script_id=None, notes=None, research_details=None):  # noqa: E501
        """Extendednotesresearch - a model defined in Swagger"""  # noqa: E501
        self._research_id = None
        self._script_id = None
        self._notes = None
        self._research_details = None
        self.discriminator = None
        self.research_id = research_id
        if script_id is not None:
            self.script_id = script_id
        if notes is not None:
            self.notes = notes
        if research_details is not None:
            self.research_details = research_details

    @property
    def research_id(self):
        """Gets the research_id of this Extendednotesresearch.  # noqa: E501

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The research_id of this Extendednotesresearch.  # noqa: E501
        :rtype: int
        """
        return self._research_id

    @research_id.setter
    def research_id(self, research_id):
        """Sets the research_id of this Extendednotesresearch.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param research_id: The research_id of this Extendednotesresearch.  # noqa: E501
        :type: int
        """
        if research_id is None:
            raise ValueError("Invalid value for `research_id`, must not be `None`")  # noqa: E501

        self._research_id = research_id

    @property
    def script_id(self):
        """Gets the script_id of this Extendednotesresearch.  # noqa: E501

        Note: This is a Foreign Key to `script.script_id`.<fk table='script' column='script_id'/>  # noqa: E501

        :return: The script_id of this Extendednotesresearch.  # noqa: E501
        :rtype: int
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this Extendednotesresearch.

        Note: This is a Foreign Key to `script.script_id`.<fk table='script' column='script_id'/>  # noqa: E501

        :param script_id: The script_id of this Extendednotesresearch.  # noqa: E501
        :type: int
        """

        self._script_id = script_id

    @property
    def notes(self):
        """Gets the notes of this Extendednotesresearch.  # noqa: E501


        :return: The notes of this Extendednotesresearch.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Extendednotesresearch.


        :param notes: The notes of this Extendednotesresearch.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def research_details(self):
        """Gets the research_details of this Extendednotesresearch.  # noqa: E501


        :return: The research_details of this Extendednotesresearch.  # noqa: E501
        :rtype: str
        """
        return self._research_details

    @research_details.setter
    def research_details(self, research_details):
        """Sets the research_details of this Extendednotesresearch.


        :param research_details: The research_details of this Extendednotesresearch.  # noqa: E501
        :type: str
        """

        self._research_details = research_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Extendednotesresearch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Extendednotesresearch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
