# coding: utf-8

"""
    standard public schema

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 12.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Scene(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scene_id': 'int',
        'act_id': 'int',
        'scene_number': 'int',
        'synopsis': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'scene_id': 'scene_id',
        'act_id': 'act_id',
        'scene_number': 'scene_number',
        'synopsis': 'synopsis',
        'notes': 'notes'
    }

    def __init__(self, scene_id=None, act_id=None, scene_number=None, synopsis=None, notes=None):  # noqa: E501
        """Scene - a model defined in Swagger"""  # noqa: E501
        self._scene_id = None
        self._act_id = None
        self._scene_number = None
        self._synopsis = None
        self._notes = None
        self.discriminator = None
        self.scene_id = scene_id
        if act_id is not None:
            self.act_id = act_id
        self.scene_number = scene_number
        if synopsis is not None:
            self.synopsis = synopsis
        if notes is not None:
            self.notes = notes

    @property
    def scene_id(self):
        """Gets the scene_id of this Scene.  # noqa: E501

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The scene_id of this Scene.  # noqa: E501
        :rtype: int
        """
        return self._scene_id

    @scene_id.setter
    def scene_id(self, scene_id):
        """Sets the scene_id of this Scene.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param scene_id: The scene_id of this Scene.  # noqa: E501
        :type: int
        """
        if scene_id is None:
            raise ValueError("Invalid value for `scene_id`, must not be `None`")  # noqa: E501

        self._scene_id = scene_id

    @property
    def act_id(self):
        """Gets the act_id of this Scene.  # noqa: E501

        Note: This is a Foreign Key to `act.act_id`.<fk table='act' column='act_id'/>  # noqa: E501

        :return: The act_id of this Scene.  # noqa: E501
        :rtype: int
        """
        return self._act_id

    @act_id.setter
    def act_id(self, act_id):
        """Sets the act_id of this Scene.

        Note: This is a Foreign Key to `act.act_id`.<fk table='act' column='act_id'/>  # noqa: E501

        :param act_id: The act_id of this Scene.  # noqa: E501
        :type: int
        """

        self._act_id = act_id

    @property
    def scene_number(self):
        """Gets the scene_number of this Scene.  # noqa: E501


        :return: The scene_number of this Scene.  # noqa: E501
        :rtype: int
        """
        return self._scene_number

    @scene_number.setter
    def scene_number(self, scene_number):
        """Sets the scene_number of this Scene.


        :param scene_number: The scene_number of this Scene.  # noqa: E501
        :type: int
        """
        if scene_number is None:
            raise ValueError("Invalid value for `scene_number`, must not be `None`")  # noqa: E501

        self._scene_number = scene_number

    @property
    def synopsis(self):
        """Gets the synopsis of this Scene.  # noqa: E501


        :return: The synopsis of this Scene.  # noqa: E501
        :rtype: str
        """
        return self._synopsis

    @synopsis.setter
    def synopsis(self, synopsis):
        """Sets the synopsis of this Scene.


        :param synopsis: The synopsis of this Scene.  # noqa: E501
        :type: str
        """

        self._synopsis = synopsis

    @property
    def notes(self):
        """Gets the notes of this Scene.  # noqa: E501


        :return: The notes of this Scene.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Scene.


        :param notes: The notes of this Scene.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Scene, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scene):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
