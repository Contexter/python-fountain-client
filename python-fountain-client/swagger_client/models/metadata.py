# coding: utf-8

"""
    standard public schema

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 12.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Metadata(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'metadata_id': 'int',
        'creation_date': 'date',
        'last_modified_date': 'date',
        'version_number': 'int',
        'additional_information': 'str'
    }

    attribute_map = {
        'metadata_id': 'metadata_id',
        'creation_date': 'creation_date',
        'last_modified_date': 'last_modified_date',
        'version_number': 'version_number',
        'additional_information': 'additional_information'
    }

    def __init__(self, metadata_id=None, creation_date=None, last_modified_date=None, version_number=None, additional_information=None):  # noqa: E501
        """Metadata - a model defined in Swagger"""  # noqa: E501
        self._metadata_id = None
        self._creation_date = None
        self._last_modified_date = None
        self._version_number = None
        self._additional_information = None
        self.discriminator = None
        self.metadata_id = metadata_id
        if creation_date is not None:
            self.creation_date = creation_date
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if version_number is not None:
            self.version_number = version_number
        if additional_information is not None:
            self.additional_information = additional_information

    @property
    def metadata_id(self):
        """Gets the metadata_id of this Metadata.  # noqa: E501

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The metadata_id of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._metadata_id

    @metadata_id.setter
    def metadata_id(self, metadata_id):
        """Sets the metadata_id of this Metadata.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param metadata_id: The metadata_id of this Metadata.  # noqa: E501
        :type: int
        """
        if metadata_id is None:
            raise ValueError("Invalid value for `metadata_id`, must not be `None`")  # noqa: E501

        self._metadata_id = metadata_id

    @property
    def creation_date(self):
        """Gets the creation_date of this Metadata.  # noqa: E501


        :return: The creation_date of this Metadata.  # noqa: E501
        :rtype: date
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Metadata.


        :param creation_date: The creation_date of this Metadata.  # noqa: E501
        :type: date
        """

        self._creation_date = creation_date

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this Metadata.  # noqa: E501


        :return: The last_modified_date of this Metadata.  # noqa: E501
        :rtype: date
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this Metadata.


        :param last_modified_date: The last_modified_date of this Metadata.  # noqa: E501
        :type: date
        """

        self._last_modified_date = last_modified_date

    @property
    def version_number(self):
        """Gets the version_number of this Metadata.  # noqa: E501


        :return: The version_number of this Metadata.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this Metadata.


        :param version_number: The version_number of this Metadata.  # noqa: E501
        :type: int
        """

        self._version_number = version_number

    @property
    def additional_information(self):
        """Gets the additional_information of this Metadata.  # noqa: E501


        :return: The additional_information of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._additional_information

    @additional_information.setter
    def additional_information(self, additional_information):
        """Sets the additional_information of this Metadata.


        :param additional_information: The additional_information of this Metadata.  # noqa: E501
        :type: str
        """

        self._additional_information = additional_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
