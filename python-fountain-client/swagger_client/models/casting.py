# coding: utf-8

"""
    standard public schema

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 12.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Casting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'casting_id': 'int',
        'character_id': 'int',
        'actor_characteristics_choices': 'str'
    }

    attribute_map = {
        'casting_id': 'casting_id',
        'character_id': 'character_id',
        'actor_characteristics_choices': 'actor_characteristics_choices'
    }

    def __init__(self, casting_id=None, character_id=None, actor_characteristics_choices=None):  # noqa: E501
        """Casting - a model defined in Swagger"""  # noqa: E501
        self._casting_id = None
        self._character_id = None
        self._actor_characteristics_choices = None
        self.discriminator = None
        self.casting_id = casting_id
        if character_id is not None:
            self.character_id = character_id
        if actor_characteristics_choices is not None:
            self.actor_characteristics_choices = actor_characteristics_choices

    @property
    def casting_id(self):
        """Gets the casting_id of this Casting.  # noqa: E501

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The casting_id of this Casting.  # noqa: E501
        :rtype: int
        """
        return self._casting_id

    @casting_id.setter
    def casting_id(self, casting_id):
        """Sets the casting_id of this Casting.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param casting_id: The casting_id of this Casting.  # noqa: E501
        :type: int
        """
        if casting_id is None:
            raise ValueError("Invalid value for `casting_id`, must not be `None`")  # noqa: E501

        self._casting_id = casting_id

    @property
    def character_id(self):
        """Gets the character_id of this Casting.  # noqa: E501

        Note: This is a Foreign Key to `character.character_id`.<fk table='character' column='character_id'/>  # noqa: E501

        :return: The character_id of this Casting.  # noqa: E501
        :rtype: int
        """
        return self._character_id

    @character_id.setter
    def character_id(self, character_id):
        """Sets the character_id of this Casting.

        Note: This is a Foreign Key to `character.character_id`.<fk table='character' column='character_id'/>  # noqa: E501

        :param character_id: The character_id of this Casting.  # noqa: E501
        :type: int
        """

        self._character_id = character_id

    @property
    def actor_characteristics_choices(self):
        """Gets the actor_characteristics_choices of this Casting.  # noqa: E501


        :return: The actor_characteristics_choices of this Casting.  # noqa: E501
        :rtype: str
        """
        return self._actor_characteristics_choices

    @actor_characteristics_choices.setter
    def actor_characteristics_choices(self, actor_characteristics_choices):
        """Sets the actor_characteristics_choices of this Casting.


        :param actor_characteristics_choices: The actor_characteristics_choices of this Casting.  # noqa: E501
        :type: str
        """

        self._actor_characteristics_choices = actor_characteristics_choices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Casting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Casting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
