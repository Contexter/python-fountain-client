# coding: utf-8

"""
    standard public schema

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 12.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Script(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'script_id': 'int',
        'title': 'str',
        'author_id': 'int',
        'url': 'str',
        'metadata_id': 'int'
    }

    attribute_map = {
        'script_id': 'script_id',
        'title': 'title',
        'author_id': 'author_id',
        'url': 'url',
        'metadata_id': 'metadata_id'
    }

    def __init__(self, script_id=None, title=None, author_id=None, url=None, metadata_id=None):  # noqa: E501
        """Script - a model defined in Swagger"""  # noqa: E501
        self._script_id = None
        self._title = None
        self._author_id = None
        self._url = None
        self._metadata_id = None
        self.discriminator = None
        self.script_id = script_id
        self.title = title
        if author_id is not None:
            self.author_id = author_id
        if url is not None:
            self.url = url
        if metadata_id is not None:
            self.metadata_id = metadata_id

    @property
    def script_id(self):
        """Gets the script_id of this Script.  # noqa: E501

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The script_id of this Script.  # noqa: E501
        :rtype: int
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this Script.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param script_id: The script_id of this Script.  # noqa: E501
        :type: int
        """
        if script_id is None:
            raise ValueError("Invalid value for `script_id`, must not be `None`")  # noqa: E501

        self._script_id = script_id

    @property
    def title(self):
        """Gets the title of this Script.  # noqa: E501


        :return: The title of this Script.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Script.


        :param title: The title of this Script.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def author_id(self):
        """Gets the author_id of this Script.  # noqa: E501

        Note: This is a Foreign Key to `playwright.author_id`.<fk table='playwright' column='author_id'/>  # noqa: E501

        :return: The author_id of this Script.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this Script.

        Note: This is a Foreign Key to `playwright.author_id`.<fk table='playwright' column='author_id'/>  # noqa: E501

        :param author_id: The author_id of this Script.  # noqa: E501
        :type: int
        """

        self._author_id = author_id

    @property
    def url(self):
        """Gets the url of this Script.  # noqa: E501


        :return: The url of this Script.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Script.


        :param url: The url of this Script.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def metadata_id(self):
        """Gets the metadata_id of this Script.  # noqa: E501

        Note: This is a Foreign Key to `metadata.metadata_id`.<fk table='metadata' column='metadata_id'/>  # noqa: E501

        :return: The metadata_id of this Script.  # noqa: E501
        :rtype: int
        """
        return self._metadata_id

    @metadata_id.setter
    def metadata_id(self, metadata_id):
        """Sets the metadata_id of this Script.

        Note: This is a Foreign Key to `metadata.metadata_id`.<fk table='metadata' column='metadata_id'/>  # noqa: E501

        :param metadata_id: The metadata_id of this Script.  # noqa: E501
        :type: int
        """

        self._metadata_id = metadata_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Script, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Script):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
