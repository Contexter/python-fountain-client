# coding: utf-8

"""
    standard public schema

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 12.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Parenthetical(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parenthetical_id': 'int',
        'dialogue_id': 'int',
        'original_text': 'str',
        'modernized_text': 'str'
    }

    attribute_map = {
        'parenthetical_id': 'parenthetical_id',
        'dialogue_id': 'dialogue_id',
        'original_text': 'original_text',
        'modernized_text': 'modernized_text'
    }

    def __init__(self, parenthetical_id=None, dialogue_id=None, original_text=None, modernized_text=None):  # noqa: E501
        """Parenthetical - a model defined in Swagger"""  # noqa: E501
        self._parenthetical_id = None
        self._dialogue_id = None
        self._original_text = None
        self._modernized_text = None
        self.discriminator = None
        self.parenthetical_id = parenthetical_id
        if dialogue_id is not None:
            self.dialogue_id = dialogue_id
        if original_text is not None:
            self.original_text = original_text
        if modernized_text is not None:
            self.modernized_text = modernized_text

    @property
    def parenthetical_id(self):
        """Gets the parenthetical_id of this Parenthetical.  # noqa: E501

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The parenthetical_id of this Parenthetical.  # noqa: E501
        :rtype: int
        """
        return self._parenthetical_id

    @parenthetical_id.setter
    def parenthetical_id(self, parenthetical_id):
        """Sets the parenthetical_id of this Parenthetical.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param parenthetical_id: The parenthetical_id of this Parenthetical.  # noqa: E501
        :type: int
        """
        if parenthetical_id is None:
            raise ValueError("Invalid value for `parenthetical_id`, must not be `None`")  # noqa: E501

        self._parenthetical_id = parenthetical_id

    @property
    def dialogue_id(self):
        """Gets the dialogue_id of this Parenthetical.  # noqa: E501

        Note: This is a Foreign Key to `dialogue.dialogue_id`.<fk table='dialogue' column='dialogue_id'/>  # noqa: E501

        :return: The dialogue_id of this Parenthetical.  # noqa: E501
        :rtype: int
        """
        return self._dialogue_id

    @dialogue_id.setter
    def dialogue_id(self, dialogue_id):
        """Sets the dialogue_id of this Parenthetical.

        Note: This is a Foreign Key to `dialogue.dialogue_id`.<fk table='dialogue' column='dialogue_id'/>  # noqa: E501

        :param dialogue_id: The dialogue_id of this Parenthetical.  # noqa: E501
        :type: int
        """

        self._dialogue_id = dialogue_id

    @property
    def original_text(self):
        """Gets the original_text of this Parenthetical.  # noqa: E501


        :return: The original_text of this Parenthetical.  # noqa: E501
        :rtype: str
        """
        return self._original_text

    @original_text.setter
    def original_text(self, original_text):
        """Sets the original_text of this Parenthetical.


        :param original_text: The original_text of this Parenthetical.  # noqa: E501
        :type: str
        """

        self._original_text = original_text

    @property
    def modernized_text(self):
        """Gets the modernized_text of this Parenthetical.  # noqa: E501


        :return: The modernized_text of this Parenthetical.  # noqa: E501
        :rtype: str
        """
        return self._modernized_text

    @modernized_text.setter
    def modernized_text(self, modernized_text):
        """Sets the modernized_text of this Parenthetical.


        :param modernized_text: The modernized_text of this Parenthetical.  # noqa: E501
        :type: str
        """

        self._modernized_text = modernized_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Parenthetical, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Parenthetical):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
