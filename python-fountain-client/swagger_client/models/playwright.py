# coding: utf-8

"""
    standard public schema

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 12.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Playwright(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'author_id': 'int',
        'name': 'str',
        'biography': 'str',
        'contact_information': 'str'
    }

    attribute_map = {
        'author_id': 'author_id',
        'name': 'name',
        'biography': 'biography',
        'contact_information': 'contact_information'
    }

    def __init__(self, author_id=None, name=None, biography=None, contact_information=None):  # noqa: E501
        """Playwright - a model defined in Swagger"""  # noqa: E501
        self._author_id = None
        self._name = None
        self._biography = None
        self._contact_information = None
        self.discriminator = None
        self.author_id = author_id
        self.name = name
        if biography is not None:
            self.biography = biography
        if contact_information is not None:
            self.contact_information = contact_information

    @property
    def author_id(self):
        """Gets the author_id of this Playwright.  # noqa: E501

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The author_id of this Playwright.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this Playwright.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param author_id: The author_id of this Playwright.  # noqa: E501
        :type: int
        """
        if author_id is None:
            raise ValueError("Invalid value for `author_id`, must not be `None`")  # noqa: E501

        self._author_id = author_id

    @property
    def name(self):
        """Gets the name of this Playwright.  # noqa: E501


        :return: The name of this Playwright.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Playwright.


        :param name: The name of this Playwright.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def biography(self):
        """Gets the biography of this Playwright.  # noqa: E501


        :return: The biography of this Playwright.  # noqa: E501
        :rtype: str
        """
        return self._biography

    @biography.setter
    def biography(self, biography):
        """Sets the biography of this Playwright.


        :param biography: The biography of this Playwright.  # noqa: E501
        :type: str
        """

        self._biography = biography

    @property
    def contact_information(self):
        """Gets the contact_information of this Playwright.  # noqa: E501


        :return: The contact_information of this Playwright.  # noqa: E501
        :rtype: str
        """
        return self._contact_information

    @contact_information.setter
    def contact_information(self, contact_information):
        """Sets the contact_information of this Playwright.


        :param contact_information: The contact_information of this Playwright.  # noqa: E501
        :type: str
        """

        self._contact_information = contact_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Playwright, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Playwright):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
