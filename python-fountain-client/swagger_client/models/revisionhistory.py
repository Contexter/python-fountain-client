# coding: utf-8

"""
    standard public schema

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 12.0.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Revisionhistory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'revision_id': 'int',
        'script_id': 'int',
        '_date': 'date',
        'change_description': 'str',
        'editor': 'str'
    }

    attribute_map = {
        'revision_id': 'revision_id',
        'script_id': 'script_id',
        '_date': 'date',
        'change_description': 'change_description',
        'editor': 'editor'
    }

    def __init__(self, revision_id=None, script_id=None, _date=None, change_description=None, editor=None):  # noqa: E501
        """Revisionhistory - a model defined in Swagger"""  # noqa: E501
        self._revision_id = None
        self._script_id = None
        self.__date = None
        self._change_description = None
        self._editor = None
        self.discriminator = None
        self.revision_id = revision_id
        if script_id is not None:
            self.script_id = script_id
        if _date is not None:
            self._date = _date
        if change_description is not None:
            self.change_description = change_description
        if editor is not None:
            self.editor = editor

    @property
    def revision_id(self):
        """Gets the revision_id of this Revisionhistory.  # noqa: E501

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :return: The revision_id of this Revisionhistory.  # noqa: E501
        :rtype: int
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Revisionhistory.

        Note: This is a Primary Key.<pk/>  # noqa: E501

        :param revision_id: The revision_id of this Revisionhistory.  # noqa: E501
        :type: int
        """
        if revision_id is None:
            raise ValueError("Invalid value for `revision_id`, must not be `None`")  # noqa: E501

        self._revision_id = revision_id

    @property
    def script_id(self):
        """Gets the script_id of this Revisionhistory.  # noqa: E501

        Note: This is a Foreign Key to `script.script_id`.<fk table='script' column='script_id'/>  # noqa: E501

        :return: The script_id of this Revisionhistory.  # noqa: E501
        :rtype: int
        """
        return self._script_id

    @script_id.setter
    def script_id(self, script_id):
        """Sets the script_id of this Revisionhistory.

        Note: This is a Foreign Key to `script.script_id`.<fk table='script' column='script_id'/>  # noqa: E501

        :param script_id: The script_id of this Revisionhistory.  # noqa: E501
        :type: int
        """

        self._script_id = script_id

    @property
    def _date(self):
        """Gets the _date of this Revisionhistory.  # noqa: E501


        :return: The _date of this Revisionhistory.  # noqa: E501
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this Revisionhistory.


        :param _date: The _date of this Revisionhistory.  # noqa: E501
        :type: date
        """

        self.__date = _date

    @property
    def change_description(self):
        """Gets the change_description of this Revisionhistory.  # noqa: E501


        :return: The change_description of this Revisionhistory.  # noqa: E501
        :rtype: str
        """
        return self._change_description

    @change_description.setter
    def change_description(self, change_description):
        """Sets the change_description of this Revisionhistory.


        :param change_description: The change_description of this Revisionhistory.  # noqa: E501
        :type: str
        """

        self._change_description = change_description

    @property
    def editor(self):
        """Gets the editor of this Revisionhistory.  # noqa: E501


        :return: The editor of this Revisionhistory.  # noqa: E501
        :rtype: str
        """
        return self._editor

    @editor.setter
    def editor(self, editor):
        """Sets the editor of this Revisionhistory.


        :param editor: The editor of this Revisionhistory.  # noqa: E501
        :type: str
        """

        self._editor = editor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Revisionhistory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Revisionhistory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
